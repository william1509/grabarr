/**
 * This file was auto-generated by swagger-to-ts.
 * Do not make direct changes to the file.
 */

export interface Watchlist {
  id?: number;
  tmdbId?: number;
  ratingKey?: string;
  type?: string;
  title?: string;
  media?: MediaInfo;
  createdAt?: string;
  updatedAt?: string;
  requestedBy?: User;
}
export interface User {
  id: number;
  email: string;
  username?: string;
  plexUsername?: string;
  plexToken?: string;
  jellyfinAuthToken?: string;
  userType?: number;
  permissions?: number;
  avatar?: string;
  createdAt: string;
  updatedAt: string;
  requestCount?: number;
}
export interface UserSettings {
  locale?: string;
  region?: string;
  originalLanguage?: string;
}
export interface MainSettings {
  apiKey?: string;
  appLanguage?: string;
  applicationTitle?: string;
  applicationUrl?: string;
  trustProxy?: boolean;
  csrfProtection?: boolean;
  hideAvailable?: boolean;
  partialRequestsEnabled?: boolean;
  localLogin?: boolean;
  mediaServerType?: number;
  newPlexLogin?: boolean;
  defaultPermissions?: number;
}
export interface PlexLibrary {
  id: string;
  name: string;
  enabled: boolean;
}
export interface PlexSettings {
  name: string;
  machineId: string;
  ip: string;
  port: number;
  useSsl?: boolean | null;
  libraries?: PlexLibrary[];
  webAppUrl?: string | null;
}
export interface PlexConnection {
  protocol: string;
  address: string;
  port: number;
  uri: string;
  local: boolean;
  status?: number;
  message?: string;
}
export interface PlexDevice {
  name: string;
  product: string;
  productVersion: string;
  platform: string;
  platformVersion?: string;
  device: string;
  clientIdentifier: string;
  createdAt: string;
  lastSeenAt: string;
  provides: string[];
  owned: boolean;
  ownerID?: string;
  home?: boolean;
  sourceTitle?: string;
  accessToken?: string;
  publicAddress?: string;
  httpsRequired?: boolean;
  synced?: boolean;
  relay?: boolean;
  dnsRebindingProtection?: boolean;
  natLoopbackSupported?: boolean;
  publicAddressMatches?: boolean;
  presence?: boolean;
  connection: PlexConnection[];
}
export interface JellyfinLibrary {
  id: string;
  name: string;
  enabled: boolean;
}
export interface JellyfinSettings {
  name?: string;
  hostname?: string;
  externalHostname?: string;
  adminUser?: string;
  adminPass?: string;
  libraries?: JellyfinLibrary[];
  serverID?: string;
}
export interface TautulliSettings {
  hostname?: string | null;
  port?: number | null;
  useSsl?: boolean | null;
  apiKey?: string | null;
  externalUrl?: string | null;
}
export interface RadarrSettings {
  id?: number;
  name: string;
  hostname: string;
  port: number;
  apiKey: string;
  useSsl: boolean;
  baseUrl?: string;
  activeProfileId: number;
  activeProfileName: string;
  activeDirectory: string;
  is4k: boolean;
  minimumAvailability: string;
  isDefault: boolean;
  externalUrl?: string;
  syncEnabled?: boolean;
  preventSearch?: boolean;
}
export interface SonarrSettings {
  id?: number;
  name: string;
  hostname: string;
  port: number;
  apiKey: string;
  useSsl: boolean;
  baseUrl?: string;
  activeProfileId: number;
  activeProfileName: string;
  activeDirectory: string;
  activeLanguageProfileId?: number;
  activeAnimeProfileId?: number | null;
  activeAnimeLanguageProfileId?: number | null;
  activeAnimeProfileName?: string | null;
  activeAnimeDirectory?: string | null;
  is4k: boolean;
  enableSeasonFolders: boolean;
  isDefault: boolean;
  externalUrl?: string;
  syncEnabled?: boolean;
  preventSearch?: boolean;
}
export interface ServarrTag {
  id?: number;
  label?: string;
}
export interface PublicSettings {
  initialized?: boolean;
}
export interface MovieResult {
  id: number;
  mediaType: string;
  popularity?: number;
  posterPath?: string;
  backdropPath?: string;
  voteCount?: number;
  voteAverage?: number;
  genreIds?: number[];
  overview?: string;
  originalLanguage?: string;
  title: string;
  originalTitle?: string;
  releaseDate?: string;
  adult?: boolean;
  video?: boolean;
  mediaInfo?: MediaInfo;
}
export interface TvResult {
  id?: number;
  mediaType?: string;
  popularity?: number;
  posterPath?: string;
  backdropPath?: string;
  voteCount?: number;
  voteAverage?: number;
  genreIds?: number[];
  overview?: string;
  originalLanguage?: string;
  name?: string;
  originalName?: string;
  originCountry?: string[];
  firstAirDate?: string;
  mediaInfo?: MediaInfo;
}
export interface PersonResult {
  id?: number;
  profilePath?: string;
  adult?: boolean;
  mediaType?: string;
  knownFor?: (MovieResult | TvResult)[];
}
export interface Genre {
  id?: number;
  name?: string;
}
export interface Company {
  id?: number;
  logo_path?: string | null;
  name?: string;
}
export interface ProductionCompany {
  id?: number;
  logoPath?: string | null;
  originCountry?: string;
  name?: string;
}
export interface Network {
  id?: number;
  logoPath?: string | null;
  originCountry?: string;
  name?: string;
}
export interface RelatedVideo {
  url?: string;
  key?: string;
  name?: string;
  size?: number;
  type?:
    | "Clip"
    | "Teaser"
    | "Trailer"
    | "Featurette"
    | "Opening Credits"
    | "Behind the Scenes"
    | "Bloopers";
  site?: "YouTube";
}
export interface MovieDetails {
  id?: number;
  imdbId?: string;
  adult?: boolean;
  backdropPath?: string;
  posterPath?: string;
  budget?: number;
  genres?: Genre[];
  homepage?: string;
  relatedVideos?: RelatedVideo[];
  originalLanguage?: string;
  originalTitle?: string;
  overview?: string;
  popularity?: number;
  productionCompanies?: ProductionCompany[];
  productionCountries?: { iso_3166_1?: string; name?: string }[];
  releaseDate?: string;
  releases?: {
    results?: {
      iso_3166_1?: string;
      rating?: string | null;
      release_dates?: {
        certification?: string;
        iso_639_1?: string | null;
        note?: string | null;
        release_date?: string;
        type?: number;
      }[];
    }[];
  };
  revenue?: number | null;
  runtime?: number;
  spokenLanguages?: SpokenLanguage[];
  status?: string;
  tagline?: string;
  title?: string;
  video?: boolean;
  voteAverage?: number;
  voteCount?: number;
  credits?: {
    cast?: Cast[];
    crew?: Crew[];
  };
  collection?: {
    id?: number;
    name?: string;
    posterPath?: string;
    backdropPath?: string;
  };
  externalIds?: ExternalIds;
  mediaInfo?: MediaInfo;
  watchProviders?: WatchProviders[];
}
export interface Episode {
  id?: number;
  name?: string;
  airDate?: string | null;
  episodeNumber?: number;
  overview?: string;
  productionCode?: string;
  seasonNumber?: number;
  showId?: number;
  stillPath?: string | null;
  voteAverage?: number;
  voteCount?: number;
}
export interface Season {
  id?: number;
  airDate?: string | null;
  episodeCount?: number;
  name?: string;
  overview?: string;
  posterPath?: string;
  seasonNumber?: number;
  episodes?: Episode[];
}
export interface TvDetails {
  id?: number;
  backdropPath?: string;
  posterPath?: string;
  contentRatings?: { results?: { iso_3166_1?: string; rating?: string }[] };
  createdBy?: {
    id?: number;
    name?: string;
    gender?: number;
    profilePath?: string | null;
  }[];
  episodeRunTime?: number[];
  firstAirDate?: string;
  genres?: Genre[];
  homepage?: string;
  inProduction?: boolean;
  languages?: string[];
  lastAirDate?: string;
  lastEpisodeToAir?: Episode;
  name?: string;
  nextEpisodeToAir?: Episode;
  networks?: ProductionCompany[];
  numberOfEpisodes?: number;
  numberOfSeason?: number;
  originCountry?: string[];
  originalLanguage?: string;
  originalName?: string;
  overview?: string;
  popularity?: number;
  productionCompanies?: ProductionCompany[];
  productionCountries?: { iso_3166_1?: string; name?: string }[];
  spokenLanguages?: SpokenLanguage[];
  seasons?: Season[];
  status?: string;
  tagline?: string;
  type?: string;
  voteAverage?: number;
  voteCount?: number;
  credits?: {
    cast?: Cast[];
    crew?: Crew[];
  };
  externalIds?: ExternalIds;
  keywords?: Keyword[];
  mediaInfo?: MediaInfo;
  watchProviders?: WatchProviders[];
}
export interface MediaRequest {
  id: number;
  /**
   * Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED
   */
  status: number;
  media?: MediaInfo;
  createdAt?: string;
  updatedAt?: string;
  requestedBy?: User;
  modifiedBy?: Partial<User> & Partial<string>;
  is4k?: boolean;
  serverId?: number;
  profileId?: number;
  rootFolder?: string;
}
export interface MediaInfo {
  id?: number;
  tmdbId?: number;
  tvdbId?: number | null;
  /**
   * Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
   */
  status?: number;
  requests?: MediaRequest[];
  createdAt?: string;
  updatedAt?: string;
}
export interface Cast {
  id?: number;
  castId?: number;
  character?: string;
  creditId?: string;
  gender?: number;
  name?: string;
  order?: number;
  profilePath?: string | null;
}
export interface Crew {
  id?: number;
  creditId?: string;
  gender?: number;
  name?: string;
  job?: string;
  department?: string;
  profilePath?: string | null;
}
export interface ExternalIds {
  facebookId?: string | null;
  freebaseId?: string | null;
  freebaseMid?: string | null;
  imdbId?: string | null;
  instagramId?: string | null;
  tvdbId?: number | null;
  tvrageId?: number | null;
  twitterId?: string | null;
}
export interface ServiceProfile {
  id?: number;
  name?: string;
}
export interface PageInfo {
  page?: number;
  pages?: number;
  results?: number;
}
export interface DiscordSettings {
  enabled?: boolean;
  types?: number;
  options?: {
    botUsername?: string;
    botAvatarUrl?: string;
    webhookUrl?: string;
    enableMentions?: boolean;
  };
}
export interface SlackSettings {
  enabled?: boolean;
  types?: number;
  options?: { webhookUrl?: string };
}
export interface WebPushSettings {
  enabled?: boolean;
  types?: number;
}
export interface WebhookSettings {
  enabled?: boolean;
  types?: number;
  options?: {
    webhookUrl?: string;
    authHeader?: string;
    jsonPayload?: string;
  };
}
export interface TelegramSettings {
  enabled?: boolean;
  types?: number;
  options?: {
    botUsername?: string;
    botAPI?: string;
    chatId?: string;
    sendSilently?: boolean;
  };
}
export interface PushbulletSettings {
  enabled?: boolean;
  types?: number;
  options?: { accessToken?: string; channelTag?: string | null };
}
export interface PushoverSettings {
  enabled?: boolean;
  types?: number;
  options?: { accessToken?: string; userToken?: string };
}
export interface GotifySettings {
  enabled?: boolean;
  types?: number;
  options?: { url?: string; token?: string };
}
export interface LunaSeaSettings {
  enabled?: boolean;
  types?: number;
  options?: { webhookUrl?: string; profileName?: string };
}
export interface NotificationEmailSettings {
  enabled?: boolean;
  types?: number;
  options?: {
    emailFrom?: string;
    senderName?: string;
    smtpHost?: string;
    smtpPort?: number;
    secure?: boolean;
    ignoreTls?: boolean;
    requireTls?: boolean;
    authUser?: string | null;
    authPass?: string | null;
    allowSelfSigned?: boolean;
  };
}
export interface Job {
  id?: string;
  type?: "process" | "command";
  interval?: "short" | "long" | "fixed";
  name?: string;
  nextExecutionTime?: string;
  running?: boolean;
}
export interface PersonDetails {
  id?: number;
  name?: string;
  deathday?: string;
  knownForDepartment?: string;
  alsoKnownAs?: string[];
  gender?: string;
  biography?: string;
  popularity?: string;
  placeOfBirth?: string;
  profilePath?: string;
  adult?: boolean;
  imdbId?: string;
  homepage?: string;
}
export interface CreditCast {
  id?: number;
  originalLanguage?: string;
  episodeCount?: number;
  overview?: string;
  originCountry?: string[];
  originalName?: string;
  voteCount?: number;
  name?: string;
  mediaType?: string;
  popularity?: number;
  creditId?: string;
  backdropPath?: string;
  firstAirDate?: string;
  voteAverage?: number;
  genreIds?: number[];
  posterPath?: string;
  originalTitle?: string;
  video?: boolean;
  title?: string;
  adult?: boolean;
  releaseDate?: string;
  character?: string;
  mediaInfo?: MediaInfo;
}
export interface CreditCrew {
  id?: number;
  originalLanguage?: string;
  episodeCount?: number;
  overview?: string;
  originCountry?: string[];
  originalName?: string;
  voteCount?: number;
  name?: string;
  mediaType?: string;
  popularity?: number;
  creditId?: string;
  backdropPath?: string;
  firstAirDate?: string;
  voteAverage?: number;
  genreIds?: number[];
  posterPath?: string;
  originalTitle?: string;
  video?: boolean;
  title?: string;
  adult?: boolean;
  releaseDate?: string;
  department?: string;
  job?: string;
  mediaInfo?: MediaInfo;
}
export interface Keyword {
  id?: number;
  name?: string;
}
export interface SpokenLanguage {
  englishName?: string | null;
  iso_639_1?: string;
  name?: string;
}
export interface Collection {
  id?: number;
  name?: string;
  overview?: string;
  posterPath?: string;
  backdropPath?: string;
  parts?: MovieResult[];
}
export interface SonarrSeries {
  title?: string;
  sortTitle?: string;
  seasonCount?: number;
  status?: string;
  overview?: string;
  network?: string;
  airTime?: string;
  images?: { coverType?: string; url?: string }[];
  remotePoster?: string;
  seasons?: { seasonNumber?: number; monitored?: boolean }[];
  year?: number;
  path?: string;
  profileId?: number;
  languageProfileId?: number;
  seasonFolder?: boolean;
  monitored?: boolean;
  useSceneNumbering?: boolean;
  runtime?: number;
  tvdbId?: number;
  tvRageId?: number;
  tvMazeId?: number;
  firstAired?: string;
  lastInfoSync?: string | null;
  seriesType?: string;
  cleanTitle?: string;
  imdbId?: string;
  titleSlug?: string;
  certification?: string;
  genres?: string[];
  tags?: string[];
  added?: string;
  ratings?: { votes?: number; value?: number }[];
  qualityProfileId?: number;
  id?: number | null;
  rootFolderPath?: string | null;
  addOptions?: {
    ignoreEpisodesWithFiles?: boolean | null;
    ignoreEpisodesWithoutFiles?: boolean | null;
    searchForMissingEpisodes?: boolean | null;
  }[];
}
export interface UserSettingsNotifications {
  notificationTypes?: NotificationAgentTypes;
  emailEnabled?: boolean;
  pgpKey?: string | null;
  discordEnabled?: boolean;
  discordEnabledTypes?: number | null;
  discordId?: string | null;
  pushbulletAccessToken?: string | null;
  pushoverApplicationToken?: string | null;
  pushoverUserKey?: string | null;
  telegramEnabled?: boolean;
  telegramBotUsername?: string | null;
  telegramChatId?: string | null;
  telegramSendSilently?: boolean | null;
}
export interface NotificationAgentTypes {
  discord?: number;
  email?: number;
  pushbullet?: number;
  pushover?: number;
  slack?: number;
  telegram?: number;
  webhook?: number;
  webpush?: number;
}
export interface WatchProviders {
  iso_3166_1?: string;
  link?: string;
  buy?: WatchProviderDetails[];
  flatrate?: WatchProviderDetails[];
}
[];
export interface WatchProviderDetails {
  displayPriority?: number;
  logoPath?: string;
  id?: number;
  name?: string;
}
export interface Issue {
  id?: number;
  issueType?: number;
  media?: MediaInfo;
  createdBy?: User;
  modifiedBy?: User;
  comments?: IssueComment[];
}
export interface IssueComment {
  id?: number;
  user?: User;
  message?: string;
}
export interface DiscoverSlider {
  id?: number;
  type: number;
  title: string | null;
  isBuiltIn?: boolean;
  enabled: boolean;
  data: string | null;
}
export interface WatchProviderRegion {
  iso_3166_1?: string;
  english_name?: string;
  native_name?: string;
}